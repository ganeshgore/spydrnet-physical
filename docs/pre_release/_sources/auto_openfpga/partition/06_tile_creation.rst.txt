
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_openfpga/partition/06_tile_creation.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_openfpga_partition_06_tile_creation.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_openfpga_partition_06_tile_creation.py:


================================
FPGA Tiles from OpenFPGA Verilog
================================

This example demonstate how to create a tile strcuture from
Verilog netlist obtained from OpenFPGA

.. GENERATED FROM PYTHON SOURCE LINES 10-114




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    = = = = = = = = = = = = = = = = = = = = 
    = = = = = =  DESIGN STATS = = = = = = = 
    = = = = = = = = = = = = = = = = = = = = 
        top_module : fpga_top
        definitions: 20
        instances  : 97
    = = = = = = = = = = = = = = = = = = = = 
              References    count
    - - - - - - - - - - - - - - - - - - - - 
               cbx_1__0_        4
               cbx_1__1_       12
               cbx_1__4_        4
               cby_0__1_        4
               cby_1__1_       12
               cby_4__1_        4
                grid_clb       16
          grid_io_bottom        4
            grid_io_left        4
           grid_io_right        4
             grid_io_top        4
                sb_0__0_        1
                sb_0__1_        3
                sb_0__4_        1
                sb_1__0_        3
                sb_1__1_        9
                sb_1__4_        3
                sb_4__0_        1
                sb_4__1_        3
                sb_4__4_        1
    = = = = = = = = = = = = = = = = = = = = 
    = = = = = =  DESIGN STATS = = = = = = = 
    = = = = = = = = = = = = = = = = = = = = 
        top_module : fpga_top
        definitions: 20
        instances  : 97
    = = = = = = = = = = = = = = = = = = = = 
              References    count
    - - - - - - - - - - - - - - - - - - - - 
               cbx_1__0_        4
               cbx_1__1_       12
               cbx_1__4_        4
               cby_0__1_        4
               cby_1__1_       12
               cby_4__1_        4
                grid_clb       16
          grid_io_bottom        4
            grid_io_left        4
           grid_io_right        4
             grid_io_top        4
                sb_0__0_        1
                sb_0__1_        3
                sb_0__4_        1
                sb_1__0_        3
                sb_1__1_        9
                sb_1__4_        3
                sb_4__0_        1
                sb_4__1_        3
                sb_4__4_        1
    Flatterning sb_3__3_
    Flatterning sb_3__1_
    Flatterning sb_1__2_
    Flatterning sb_2__2_
    Flatterning sb_3__2_
    Flatterning sb_1__3_
    Flatterning sb_2__3_
    Flatterning sb_1__1_
    Flatterning sb_2__1_
    ['SDN_VERILOG_ASSIGNMENT_1_0', 'SDN_VERILOG_ASSIGNMENT_1_1', 'SDN_VERILOG_ASSIGNMENT_1_2', 'SDN_VERILOG_ASSIGNMENT_1_3', 'SDN_VERILOG_ASSIGNMENT_1_4', 'SDN_VERILOG_ASSIGNMENT_1_5', 'SDN_VERILOG_ASSIGNMENT_1_6', 'SDN_VERILOG_ASSIGNMENT_1_7', 'SDN_VERILOG_ASSIGNMENT_1_8', 'SDN_VERILOG_ASSIGNMENT_1_9', 'SDN_VERILOG_ASSIGNMENT_1_10', 'SDN_VERILOG_ASSIGNMENT_1_11', 'SDN_VERILOG_ASSIGNMENT_1_12', 'SDN_VERILOG_ASSIGNMENT_1_13', 'SDN_VERILOG_ASSIGNMENT_1_14', 'SDN_VERILOG_ASSIGNMENT_1_15', 'SDN_VERILOG_ASSIGNMENT_1_16', 'SDN_VERILOG_ASSIGNMENT_1_17', 'SDN_VERILOG_ASSIGNMENT_1_18', 'SDN_VERILOG_ASSIGNMENT_1_19', 'SDN_VERILOG_ASSIGNMENT_1_20', 'SDN_VERILOG_ASSIGNMENT_1_21', 'SDN_VERILOG_ASSIGNMENT_1_22', 'SDN_VERILOG_ASSIGNMENT_1_23', 'SDN_VERILOG_ASSIGNMENT_1_24', 'SDN_VERILOG_ASSIGNMENT_1_25', 'SDN_VERILOG_ASSIGNMENT_1_26', 'SDN_VERILOG_ASSIGNMENT_1_27', 'SDN_VERILOG_ASSIGNMENT_1_28', 'SDN_VERILOG_ASSIGNMENT_1_29', 'SDN_VERILOG_ASSIGNMENT_1_30', 'SDN_VERILOG_ASSIGNMENT_1_31', 'SDN_VERILOG_ASSIGNMENT_1_32', 'SDN_VERILOG_ASSIGNMENT_1_33', 'SDN_VERILOG_ASSIGNMENT_1_34', 'SDN_VERILOG_ASSIGNMENT_1_35', 'SDN_VERILOG_ASSIGNMENT_1_36', 'SDN_VERILOG_ASSIGNMENT_1_37', 'SDN_VERILOG_ASSIGNMENT_1_38', 'SDN_VERILOG_ASSIGNMENT_1_39', 'mux_bottom_ipin_0_const1_0_', 'mux_bottom_ipin_0_BUF_X1_0_', 'mux_bottom_ipin_0_mux_l1_in_0_', 'mux_bottom_ipin_0_mux_l2_in_0_', 'mux_bottom_ipin_0_mux_l2_in_1_', 'mux_bottom_ipin_0_mux_l2_in_2_', 'mux_bottom_ipin_0_mux_l2_in_3_', 'mux_bottom_ipin_0_mux_l3_in_0_', 'mux_bottom_ipin_0_mux_l3_in_1_', 'mux_bottom_ipin_0_mux_l4_in_0_', 'mux_bottom_ipin_1_const1_0_', 'mux_bottom_ipin_1_BUF_X1_0_', 'mux_bottom_ipin_1_mux_l1_in_0_', 'mux_bottom_ipin_1_mux_l2_in_0_', 'mux_bottom_ipin_1_mux_l2_in_1_', 'mux_bottom_ipin_1_mux_l2_in_2_', 'mux_bottom_ipin_1_mux_l2_in_3_', 'mux_bottom_ipin_1_mux_l3_in_0_', 'mux_bottom_ipin_1_mux_l3_in_1_', 'mux_bottom_ipin_1_mux_l4_in_0_', 'mux_bottom_ipin_2_const1_0_', 'mux_bottom_ipin_2_BUF_X1_0_', 'mux_bottom_ipin_2_mux_l1_in_0_', 'mux_bottom_ipin_2_mux_l2_in_0_', 'mux_bottom_ipin_2_mux_l2_in_1_', 'mux_bottom_ipin_2_mux_l2_in_2_', 'mux_bottom_ipin_2_mux_l2_in_3_', 'mux_bottom_ipin_2_mux_l3_in_0_', 'mux_bottom_ipin_2_mux_l3_in_1_', 'mux_bottom_ipin_2_mux_l4_in_0_', 'mux_bottom_ipin_3_const1_0_', 'mux_bottom_ipin_3_BUF_X1_0_', 'mux_bottom_ipin_3_mux_l1_in_0_', 'mux_bottom_ipin_3_mux_l2_in_0_', 'mux_bottom_ipin_3_mux_l2_in_1_', 'mux_bottom_ipin_3_mux_l2_in_2_', 'mux_bottom_ipin_3_mux_l2_in_3_', 'mux_bottom_ipin_3_mux_l3_in_0_', 'mux_bottom_ipin_3_mux_l3_in_1_', 'mux_bottom_ipin_3_mux_l4_in_0_', 'mux_bottom_ipin_4_const1_0_', 'mux_bottom_ipin_4_BUF_X1_0_', 'mux_bottom_ipin_4_mux_l1_in_0_', 'mux_bottom_ipin_4_mux_l2_in_0_', 'mux_bottom_ipin_4_mux_l2_in_1_', 'mux_bottom_ipin_4_mux_l2_in_2_', 'mux_bottom_ipin_4_mux_l2_in_3_', 'mux_bottom_ipin_4_mux_l3_in_0_', 'mux_bottom_ipin_4_mux_l3_in_1_', 'mux_bottom_ipin_4_mux_l4_in_0_', 'mux_bottom_ipin_5_const1_0_', 'mux_bottom_ipin_5_BUF_X1_0_', 'mux_bottom_ipin_5_mux_l1_in_0_', 'mux_bottom_ipin_5_mux_l2_in_0_', 'mux_bottom_ipin_5_mux_l2_in_1_', 'mux_bottom_ipin_5_mux_l2_in_2_', 'mux_bottom_ipin_5_mux_l2_in_3_', 'mux_bottom_ipin_5_mux_l3_in_0_', 'mux_bottom_ipin_5_mux_l3_in_1_', 'mux_bottom_ipin_5_mux_l4_in_0_', 'mux_bottom_ipin_6_const1_0_', 'mux_bottom_ipin_6_BUF_X1_0_', 'mux_bottom_ipin_6_mux_l1_in_0_', 'mux_bottom_ipin_6_mux_l2_in_0_', 'mux_bottom_ipin_6_mux_l2_in_1_', 'mux_bottom_ipin_6_mux_l2_in_2_', 'mux_bottom_ipin_6_mux_l2_in_3_', 'mux_bottom_ipin_6_mux_l3_in_0_', 'mux_bottom_ipin_6_mux_l3_in_1_', 'mux_bottom_ipin_6_mux_l4_in_0_', 'mux_bottom_ipin_7_const1_0_', 'mux_bottom_ipin_7_BUF_X1_0_', 'mux_bottom_ipin_7_mux_l1_in_0_', 'mux_bottom_ipin_7_mux_l2_in_0_', 'mux_bottom_ipin_7_mux_l2_in_1_', 'mux_bottom_ipin_7_mux_l2_in_2_', 'mux_bottom_ipin_7_mux_l2_in_3_', 'mux_bottom_ipin_7_mux_l3_in_0_', 'mux_bottom_ipin_7_mux_l3_in_1_', 'mux_bottom_ipin_7_mux_l4_in_0_', 'mux_bottom_ipin_8_const1_0_', 'mux_bottom_ipin_8_BUF_X1_0_', 'mux_bottom_ipin_8_mux_l1_in_0_', 'mux_bottom_ipin_8_mux_l2_in_0_', 'mux_bottom_ipin_8_mux_l2_in_1_', 'mux_bottom_ipin_8_mux_l2_in_2_', 'mux_bottom_ipin_8_mux_l2_in_3_', 'mux_bottom_ipin_8_mux_l3_in_0_', 'mux_bottom_ipin_8_mux_l3_in_1_', 'mux_bottom_ipin_8_mux_l4_in_0_', 'mux_bottom_ipin_9_const1_0_', 'mux_bottom_ipin_9_BUF_X1_0_', 'mux_bottom_ipin_9_mux_l1_in_0_', 'mux_bottom_ipin_9_mux_l2_in_0_', 'mux_bottom_ipin_9_mux_l2_in_1_', 'mux_bottom_ipin_9_mux_l2_in_2_', 'mux_bottom_ipin_9_mux_l2_in_3_', 'mux_bottom_ipin_9_mux_l3_in_0_', 'mux_bottom_ipin_9_mux_l3_in_1_', 'mux_bottom_ipin_9_mux_l4_in_0_', 'mux_top_ipin_0_const1_0_', 'mux_top_ipin_0_BUF_X1_0_', 'mux_top_ipin_0_mux_l1_in_0_', 'mux_top_ipin_0_mux_l2_in_0_', 'mux_top_ipin_0_mux_l2_in_1_', 'mux_top_ipin_0_mux_l2_in_2_', 'mux_top_ipin_0_mux_l2_in_3_', 'mux_top_ipin_0_mux_l3_in_0_', 'mux_top_ipin_0_mux_l3_in_1_', 'mux_top_ipin_0_mux_l4_in_0_', 'mux_top_ipin_1_const1_0_', 'mux_top_ipin_1_BUF_X1_0_', 'mux_top_ipin_1_mux_l1_in_0_', 'mux_top_ipin_1_mux_l2_in_0_', 'mux_top_ipin_1_mux_l2_in_1_', 'mux_top_ipin_1_mux_l2_in_2_', 'mux_top_ipin_1_mux_l2_in_3_', 'mux_top_ipin_1_mux_l3_in_0_', 'mux_top_ipin_1_mux_l3_in_1_', 'mux_top_ipin_1_mux_l4_in_0_', 'mux_top_ipin_2_const1_0_', 'mux_top_ipin_2_BUF_X1_0_', 'mux_top_ipin_2_mux_l1_in_0_', 'mux_top_ipin_2_mux_l2_in_0_', 'mux_top_ipin_2_mux_l2_in_1_', 'mux_top_ipin_2_mux_l2_in_2_', 'mux_top_ipin_2_mux_l2_in_3_', 'mux_top_ipin_2_mux_l3_in_0_', 'mux_top_ipin_2_mux_l3_in_1_', 'mux_top_ipin_2_mux_l4_in_0_', 'mux_top_ipin_3_const1_0_', 'mux_top_ipin_3_BUF_X1_0_', 'mux_top_ipin_3_mux_l1_in_0_', 'mux_top_ipin_3_mux_l2_in_0_', 'mux_top_ipin_3_mux_l2_in_1_', 'mux_top_ipin_3_mux_l2_in_2_', 'mux_top_ipin_3_mux_l2_in_3_', 'mux_top_ipin_3_mux_l3_in_0_', 'mux_top_ipin_3_mux_l3_in_1_', 'mux_top_ipin_3_mux_l4_in_0_', 'mux_top_ipin_4_const1_0_', 'mux_top_ipin_4_BUF_X1_0_', 'mux_top_ipin_4_mux_l1_in_0_', 'mux_top_ipin_4_mux_l2_in_0_', 'mux_top_ipin_4_mux_l2_in_1_', 'mux_top_ipin_4_mux_l2_in_2_', 'mux_top_ipin_4_mux_l2_in_3_', 'mux_top_ipin_4_mux_l3_in_0_', 'mux_top_ipin_4_mux_l3_in_1_', 'mux_top_ipin_4_mux_l4_in_0_', 'mux_top_ipin_5_const1_0_', 'mux_top_ipin_5_BUF_X1_0_', 'mux_top_ipin_5_mux_l1_in_0_', 'mux_top_ipin_5_mux_l2_in_0_', 'mux_top_ipin_5_mux_l2_in_1_', 'mux_top_ipin_5_mux_l2_in_2_', 'mux_top_ipin_5_mux_l2_in_3_', 'mux_top_ipin_5_mux_l3_in_0_', 'mux_top_ipin_5_mux_l3_in_1_', 'mux_top_ipin_5_mux_l4_in_0_', 'mux_top_ipin_6_const1_0_', 'mux_top_ipin_6_BUF_X1_0_', 'mux_top_ipin_6_mux_l1_in_0_', 'mux_top_ipin_6_mux_l2_in_0_', 'mux_top_ipin_6_mux_l2_in_1_', 'mux_top_ipin_6_mux_l2_in_2_', 'mux_top_ipin_6_mux_l2_in_3_', 'mux_top_ipin_6_mux_l3_in_0_', 'mux_top_ipin_6_mux_l3_in_1_', 'mux_top_ipin_6_mux_l4_in_0_', 'mux_top_ipin_7_const1_0_', 'mux_top_ipin_7_BUF_X1_0_', 'mux_top_ipin_7_mux_l1_in_0_', 'mux_top_ipin_7_mux_l2_in_0_', 'mux_top_ipin_7_mux_l2_in_1_', 'mux_top_ipin_7_mux_l2_in_2_', 'mux_top_ipin_7_mux_l2_in_3_', 'mux_top_ipin_7_mux_l3_in_0_', 'mux_top_ipin_7_mux_l3_in_1_', 'mux_top_ipin_7_mux_l4_in_0_', 'mem_bottom_ipin_0_CCDFF_0_', 'mem_bottom_ipin_0_CCDFF_1_', 'mem_bottom_ipin_0_CCDFF_2_', 'mem_bottom_ipin_0_CCDFF_3_', 'mem_bottom_ipin_1_CCDFF_0_', 'mem_bottom_ipin_1_CCDFF_1_', 'mem_bottom_ipin_1_CCDFF_2_', 'mem_bottom_ipin_1_CCDFF_3_', 'mem_bottom_ipin_2_CCDFF_0_', 'mem_bottom_ipin_2_CCDFF_1_', 'mem_bottom_ipin_2_CCDFF_2_', 'mem_bottom_ipin_2_CCDFF_3_', 'mem_bottom_ipin_3_CCDFF_0_', 'mem_bottom_ipin_3_CCDFF_1_', 'mem_bottom_ipin_3_CCDFF_2_', 'mem_bottom_ipin_3_CCDFF_3_', 'mem_bottom_ipin_4_CCDFF_0_', 'mem_bottom_ipin_4_CCDFF_1_', 'mem_bottom_ipin_4_CCDFF_2_', 'mem_bottom_ipin_4_CCDFF_3_', 'mem_bottom_ipin_5_CCDFF_0_', 'mem_bottom_ipin_5_CCDFF_1_', 'mem_bottom_ipin_5_CCDFF_2_', 'mem_bottom_ipin_5_CCDFF_3_', 'mem_bottom_ipin_6_CCDFF_0_', 'mem_bottom_ipin_6_CCDFF_1_', 'mem_bottom_ipin_6_CCDFF_2_', 'mem_bottom_ipin_6_CCDFF_3_', 'mem_bottom_ipin_7_CCDFF_0_', 'mem_bottom_ipin_7_CCDFF_1_', 'mem_bottom_ipin_7_CCDFF_2_', 'mem_bottom_ipin_7_CCDFF_3_', 'mem_bottom_ipin_8_CCDFF_0_', 'mem_bottom_ipin_8_CCDFF_1_', 'mem_bottom_ipin_8_CCDFF_2_', 'mem_bottom_ipin_8_CCDFF_3_', 'mem_bottom_ipin_9_CCDFF_0_', 'mem_bottom_ipin_9_CCDFF_1_', 'mem_bottom_ipin_9_CCDFF_2_', 'mem_bottom_ipin_9_CCDFF_3_', 'mem_top_ipin_0_CCDFF_0_', 'mem_top_ipin_0_CCDFF_1_', 'mem_top_ipin_0_CCDFF_2_', 'mem_top_ipin_0_CCDFF_3_', 'mem_top_ipin_1_CCDFF_0_', 'mem_top_ipin_1_CCDFF_1_', 'mem_top_ipin_1_CCDFF_2_', 'mem_top_ipin_1_CCDFF_3_', 'mem_top_ipin_2_CCDFF_0_', 'mem_top_ipin_2_CCDFF_1_', 'mem_top_ipin_2_CCDFF_2_', 'mem_top_ipin_2_CCDFF_3_', 'mem_top_ipin_3_CCDFF_0_', 'mem_top_ipin_3_CCDFF_1_', 'mem_top_ipin_3_CCDFF_2_', 'mem_top_ipin_3_CCDFF_3_', 'mem_top_ipin_4_CCDFF_0_', 'mem_top_ipin_4_CCDFF_1_', 'mem_top_ipin_4_CCDFF_2_', 'mem_top_ipin_4_CCDFF_3_', 'mem_top_ipin_5_CCDFF_0_', 'mem_top_ipin_5_CCDFF_1_', 'mem_top_ipin_5_CCDFF_2_', 'mem_top_ipin_5_CCDFF_3_', 'mem_top_ipin_6_CCDFF_0_', 'mem_top_ipin_6_CCDFF_1_', 'mem_top_ipin_6_CCDFF_2_', 'mem_top_ipin_6_CCDFF_3_', 'mem_top_ipin_7_CCDFF_0_', 'mem_top_ipin_7_CCDFF_1_', 'mem_top_ipin_7_CCDFF_2_', 'mem_top_ipin_7_CCDFF_3_']
    = = = = = = = = = = = = = = = = = = = = 
    = = = = = =  DESIGN STATS = = = = = = = 
    = = = = = = = = = = = = = = = = = = = = 
        top_module : fpga_top
        definitions: 23
        instances  : 124
    = = = = = = = = = = = = = = = = = = = = 
              References    count
    - - - - - - - - - - - - - - - - - - - - 
               cbx_1__0_        4
               cbx_1__1_       12
               cbx_1__4_        4
               cby_0__1_        4
               cby_1__1_       12
               cby_4__1_        4
                grid_clb       16
          grid_io_bottom        4
            grid_io_left        4
           grid_io_right        4
             grid_io_top        4
                sb_0__0_        1
                sb_0__1_        3
                sb_0__4_        1
                sb_1__0_        3
              sb_1__1__0        9
              sb_1__1__1        9
              sb_1__1__2        9
              sb_1__1__3        9
                sb_1__4_        3
                sb_4__0_        1
                sb_4__1_        3
                sb_4__4_        1






|

.. code-block:: default


    import glob
    import json
    import logging
    from pathlib import Path
    import tempfile
    from itertools import chain
    from os import path

    import spydrnet as sdn
    from spydrnet_physical.util import OpenFPGA
    from spydrnet_physical.util.get_names import get_names


    logger = logging.getLogger('spydrnet_logs')
    sdn.enable_file_logging(LOG_LEVEL='INFO')


    def main():
        proj = '../homogeneous_fabric'
        source_files = glob.glob(f'{proj}/*_Verilog/lb/*.v')
        source_files += glob.glob(f'{proj}/*_Verilog/routing/*.v')
        source_files += glob.glob(f'{proj}/*_Verilog/sub_module/*.v')
        source_files += glob.glob(f'{proj}/*_Verilog/fpga_top.v')

        # Temporary fix to read multiple verilog files
        with tempfile.NamedTemporaryFile(suffix=".v") as fp:
            for eachV in source_files:
                with open(eachV, "r") as fpv:
                    fp.write(str.encode(" ".join(fpv.readlines())))
            fp.seek(0)
            netlist = sdn.parse(fp.name)

        fpga = OpenFPGA(grid=(4, 4), netlist=netlist)
        fpga.design_top_stat()

        # Convert wires to bus structure
        fpga.create_grid_clb_bus()
        fpga.create_grid_io_bus()
        fpga.create_sb_bus()
        fpga.create_cb_bus()

        # Remove undriven nets
        fpga.remove_undriven_nets()
        fpga.remove_config_chain()

        # Top level nets to bus
        for i in chain(fpga.top_module.get_instances("grid_clb*"),
                       fpga.top_module.get_instances("grid_io*"),
                       fpga.top_module.get_instances("sb_*")):
            for p in filter(lambda x: True, i.reference.ports):
                if p.size > 1 and (i.check_all_scalar_connections(p)):
                    cable_list = []
                    for pin in p.pins[::-1]:
                        cable_list.append(i.pins[pin].wire.cable)
                    fpga.top_module.combine_cables(
                        f"{i.name}_{p.name}", cable_list)

        # fpga.create_grid_clb_feedthroughs()

        # Before Creating Tiles
        fpga.design_top_stat()

        # fpga.register_tile_generator(Tile02)
        # fpga.create_tiles()
        for module in list(netlist.get_definitions("*b_1__1*")):
            # Flatten the netlist
            for instance in list(module.get_instances('*_ipin_*')):
                module.flatten_instance(instance)
            for instance in list(module.get_instances('*_track_*')):
                module.flatten_instance(instance)

            parts_files = glob.glob(f"./tiles_data/{module.name}_part_*.json")
            for part, each_file in enumerate(parts_files):
                instance_list = json.load(open(each_file))
                module.merge_instance([next(module.get_instances(i)) for i in instance_list],
                                      new_definition_name=f'{module.name}_{part}',
                                      new_instance_name=f'{module.name}_{part}_1')

            for eachInst in module.references:
                print(f"Flatterning {eachInst.name}")
                fpga.top_module.flatten_instance(eachInst)

        for module in list(netlist.get_definitions("cbx_1__0_")):
            # Flatten the netlist
            for instance in list(module.get_instances('*_ipin_*')):
                module.flatten_instance(instance)
            print(get_names(module.get_instances()))

        # After Tile creation
        fpga.design_top_stat()

        # Save netlist
        base_dir = "_output_tile02"
        Path(base_dir).mkdir(parents=True, exist_ok=True)
        fpga.save_netlist("sb*", path.join(base_dir, "routing"))
        fpga.save_netlist("cb*", path.join(base_dir, "routing"))
        fpga.save_netlist("grid*", path.join(base_dir, "lb"))
        fpga.save_netlist("*tile*", path.join(base_dir, "tiles"))
        fpga.save_netlist("fpga_top", path.join(base_dir))


    if __name__ == "__main__":
        main()


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  5.611 seconds)


.. _sphx_glr_download_auto_openfpga_partition_06_tile_creation.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: 06_tile_creation.py <06_tile_creation.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: 06_tile_creation.ipynb <06_tile_creation.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
