
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_circuit_builder/02_build_register.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_circuit_builder_02_build_register.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_circuit_builder_02_build_register.py:


================================================
Build Multiplexer (SVG/Interactive)
================================================

This example demonstrates how to build a multiplexer using the `spydrnet-physical` library.

.. GENERATED FROM PYTHON SOURCE LINES 9-72

.. code-block:: Python



    import spydrnet as sdn
    import spydrnet_physical as sdnphy
    from spydrnet_physical.util import circuit_builder as circ_builder

    from spydrnet_physical.composers.html.composer import HTMLComposer
    from spydrnet_physical.composers.svg.composer import SVGComposer

    netlist = sdnphy.load_netlist_by_name("std_genlib")
    library = netlist.create_library("top")

    top_def = library.create_definition("top_module")
    top_def.create_port("shift_in", direction=sdn.IN, pins=4)
    top_def.create_port("shift_out", direction=sdn.IN, pins=4)
    top_def.create_port("reset", direction=sdn.IN, pins=1)
    top_def.create_port("enable", direction=sdn.IN, pins=1)
    top_def.create_port("clock", direction=sdn.IN, pins=1)
    top_def.create_port("bitout", direction=sdn.OUT, pins=16)

    netlist.set_top_instance(top_def)
    netlist.top_instance.reference.name = "top_module"

    # Build a single instance of MUX in this case 2:1 MUX
    sipo_reg = circ_builder.build_sipo_register(
        library=library,
        flop_module=next(netlist.get_definitions("DFF_NR_EN")),
        width=4,
        depth=4,
    )

    sipo_reg_inst = top_def.create_child("sipo_reg", reference=sipo_reg)
    top_def.create_cable("shift_in", wires=4).connect_instance_port(
        sipo_reg_inst, next(sipo_reg.get_ports("shift_in"))
    )
    top_def.create_cable("shift_out", wires=4).connect_instance_port(
        sipo_reg_inst, next(sipo_reg.get_ports("shift_out"))
    )
    top_def.create_cable("bitout", wires=16).connect_instance_port(
        sipo_reg_inst, next(sipo_reg.get_ports("out"))
    )
    top_def.create_cable("clock", wires=1).connect_instance_port(
        sipo_reg_inst, next(sipo_reg.get_ports("clock"))
    )


    sipo_reg.create_unconn_wires()

    composer = HTMLComposer()
    composer.run(netlist, file_out="_sipo_builder.html")

    composer = SVGComposer()
    composer.expand(modules=["top"])
    composer.run(
        netlist,
        file_out="_sipo_builder.svg",
        netlistsvg="netlistsvg-hierarchy",
        top_module="sipo_reg",
    )

    sdn.compose(
        netlist, filename="_sipo_builder.v", write_blackbox=False, skip_constraints=True
    )


.. _sphx_glr_download_auto_circuit_builder_02_build_register.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: 02_build_register.ipynb <02_build_register.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: 02_build_register.py <02_build_register.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: 02_build_register.zip <02_build_register.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
