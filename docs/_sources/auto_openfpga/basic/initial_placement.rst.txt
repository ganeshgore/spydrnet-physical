
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_openfpga/basic/initial_placement.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_openfpga_basic_initial_placement.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_openfpga_basic_initial_placement.py:


=========================================
Creating FPGA Tiles from OpenFPGA verilog
=========================================

This example demonstate how to create a tile strcuture from
Verilog netlist obtained from OpenFPGA

.. GENERATED FROM PYTHON SOURCE LINES 10-75




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

                  MODULE             INSTANCE LOC_X LOC_Y WIDTH HEIGHT
     = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
      grid_io_left_0__1_         grid_io_left     0     0    50    50
      grid_io_left_0__2_         grid_io_left     0     0    50    50
      grid_io_left_0__3_         grid_io_left     0     0    50    50
      grid_io_left_0__4_         grid_io_left     0     0    50    50
                sb_0__0_             sb_0__0_    96    96   200   200
                sb_0__1_             sb_0__1_    96   496   200   200
                sb_0__2_             sb_0__1_    96   896   200   200
                sb_0__3_             sb_0__1_    96  1296   200   200
                sb_0__4_             sb_0__4_    96  1696   200   200
               cby_0__1_            cby_0__1_    96   296   200   200
               cby_0__2_            cby_0__1_    96   696   200   200
               cby_0__3_            cby_0__1_    96  1096   200   200
               cby_0__4_            cby_0__1_    96  1496   200   200
    = = = = = = = = = = = = = = = = = = = = 
    = = = = = =  DESIGN STATS = = = = = = = 
    = = = = = = = = = = = = = = = = = = = = 
        top_module : fpga_top
        instances  : 97
    = = = = = = = = = = = = = = = = = = = = 
              References    count
    - - - - - - - - - - - - - - - - - - - - 
                grid_clb       16
               cbx_1__1_       12
               cby_1__1_       12
                sb_1__1_        9
             grid_io_top        4
           grid_io_right        4
          grid_io_bottom        4
            grid_io_left        4
               cbx_1__0_        4
               cbx_1__4_        4
               cby_0__1_        4
               cby_4__1_        4
                sb_0__1_        3
                sb_1__0_        3
                sb_1__4_        3
                sb_4__1_        3
                sb_0__0_        1
                sb_0__4_        1
                sb_4__0_        1
                sb_4__4_        1






|

.. code-block:: default


    import glob
    import os
    import logging
    import tempfile


    import spydrnet as sdn
    from spydrnet_physical.util import OpenFPGA
    from spydrnet_physical.util.get_floorplan import FloorPlanViz
    from spydrnet_physical.util.shell import launch_shell

    logger = logging.getLogger('spydrnet_logs')
    sdn.enable_file_logging(LOG_LEVEL='INFO')


    def main():
        proj = "../homogeneous_fabric"
        source_files = glob.glob(f'{proj}/*_Verilog/lb/*.v')
        source_files += glob.glob(f'{proj}/*_Verilog/routing/*.v')
        source_files += glob.glob(f'{proj}/*_Verilog/sub_module/*.v')
        source_files += glob.glob(f'{proj}/*_Verilog/fpga_top.v')

        # Temporary fix to read multiple verilog files
        with tempfile.NamedTemporaryFile(suffix=".v") as fp:
            for eachV in source_files:
                with open(eachV, "r") as fpv:
                    fp.write(str.encode(" ".join(fpv.readlines())))
            fp.seek(0)
            netlist = sdn.parse(fp.name)

        fpga = OpenFPGA(grid=(4, 4), netlist=netlist)
        # fpga.design_top_stat()

        fpga.create_placement()
        fpga.show_placement_data("*_0__*")

        # Convert wires to bus structure
        fpga.create_grid_clb_bus()
        fpga.create_grid_io_bus()
        fpga.create_sb_bus()
        fpga.create_cb_bus()

        fpga.design_top_stat()
        fp = FloorPlanViz(fpga.top_module)
        fp.compose(skip_connections=True, skip_pins=True)
        dwg = fp.get_svg()
        dwg.saveas("_fpga_initial_placement.svg", pretty=True, indent=4)

        # Save netlist
        base_dir = ("..", "homogeneous_fabric", "_output_2")
        fpga.save_netlist("sb*", os.path.join(*base_dir, "routing"),
                          skip_constraints=False)
        fpga.save_netlist("cb*", os.path.join(*base_dir, "routing"),
                          skip_constraints=False)
        fpga.save_netlist("grid*", os.path.join(*base_dir, "lb"),
                          skip_constraints=False)
        fpga.save_netlist("*tile*", os.path.join(*base_dir, "tiles"),
                          skip_constraints=False)
        fpga.save_netlist("fpga_top", os.path.join(*base_dir),
                          skip_constraints=False)


    if __name__ == "__main__":
        main()


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  2.596 seconds)


.. _sphx_glr_download_auto_openfpga_basic_initial_placement.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: initial_placement.py <initial_placement.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: initial_placement.ipynb <initial_placement.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
