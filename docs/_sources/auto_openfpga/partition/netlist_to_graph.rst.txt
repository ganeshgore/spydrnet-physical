
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_openfpga/partition/netlist_to_graph.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_openfpga_partition_netlist_to_graph.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_openfpga_partition_netlist_to_graph.py:


===========================
Netlist to graph (networkx)
===========================

This example demonstrate how to convert a netlist to a netowrkx graph.

**Graph representation**

.. image:: ../../../../examples/OpenFPGA/partition/_nx_graph.svg
    :align: center
    :width: 40% 

**Graph representation with port split**

.. image:: ../../../../examples/OpenFPGA/partition/_nx_graph_split.svg
    :align: center
    :width: 50% 

.. GENERATED FROM PYTHON SOURCE LINES 21-54




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

     ========== Nodes ==========
     0 in0             {'label': 'in0', 'weight': 1, 'shape': 'rect', 'port': True, 'node_name': 'in0'}
     1 in1             {'label': 'in1', 'weight': 1, 'shape': 'rect', 'port': True, 'node_name': 'in1'}
     2 bus_in          {'label': 'bus_in', 'weight': 1, 'shape': 'rect', 'port': True, 'node_name': 'bus_in'}
     3 out0            {'label': 'out0', 'weight': 1, 'shape': 'rect', 'port': True, 'node_name': 'out0'}
     4 bus_out         {'label': 'bus_out', 'weight': 1, 'shape': 'rect', 'port': True, 'node_name': 'bus_out'}
     5 inst_1_0        {'port': False, 'weight': 1, 'node_name': 'inst_1_0', 'label': 'inst_1_0'}
     6 inst_1_1        {'port': False, 'weight': 1, 'node_name': 'inst_1_1', 'label': 'inst_1_1'}
     7 inst_2_0        {'port': False, 'weight': 1, 'node_name': 'inst_2_0', 'label': 'inst_2_0'}
     8 inst_2_1        {'port': False, 'weight': 1, 'node_name': 'inst_2_1', 'label': 'inst_2_1'}
     ========== Edges ==========
    0 7 {'label': '[1]', 'edge_name': 'in0_0', 'weight': 1.0}
    0 6 {'label': '[1]', 'edge_name': 'in0_0', 'weight': 1.0}
    0 5 {'label': '[1]', 'edge_name': 'in0_0', 'weight': 1.0}
    1 5 {'label': '[1]', 'edge_name': 'in1_0', 'weight': 1.0}
    1 7 {'label': '[1]', 'edge_name': 'in1_0', 'weight': 1.0}
    2 7 {'label': '[2]', 'edge_name': 'bus_in_1', 'weight': 2.0}
    5 6 {'label': '[1]', 'edge_name': 'wire0_0', 'weight': 1.0}
    6 3 {'label': '[1]', 'edge_name': 'out0_0', 'weight': 1.0}
    7 8 {'label': '[4]', 'edge_name': 'wire_bus_1', 'weight': 4.0}
    8 4 {'label': '[2]', 'edge_name': 'bus_out_1', 'weight': 2.0}
     ========== Nodes ==========
     0 in0             {'label': 'in0', 'weight': 1, 'shape': 'rect', 'port': True, 'node_name': 'in0'}
     1 in1             {'label': 'in1', 'weight': 1, 'shape': 'rect', 'port': True, 'node_name': 'in1'}
     2 bus_in_1        {'label': 'bus_in_1', 'weight': 1, 'shape': 'rect', 'port': True, 'node_name': 'bus_in'}
     3 bus_in_0        {'label': 'bus_in_0', 'weight': 1, 'shape': 'rect', 'port': True, 'node_name': 'bus_in'}
     4 out0            {'label': 'out0', 'weight': 1, 'shape': 'rect', 'port': True, 'node_name': 'out0'}
     5 bus_out_1       {'label': 'bus_out_1', 'weight': 1, 'shape': 'rect', 'port': True, 'node_name': 'bus_out'}
     6 bus_out_0       {'label': 'bus_out_0', 'weight': 1, 'shape': 'rect', 'port': True, 'node_name': 'bus_out'}
     7 inst_1_0        {'port': False, 'weight': 1, 'node_name': 'inst_1_0', 'label': 'inst_1_0'}
     8 inst_1_1        {'port': False, 'weight': 1, 'node_name': 'inst_1_1', 'label': 'inst_1_1'}
     9 inst_2_0        {'port': False, 'weight': 1, 'node_name': 'inst_2_0', 'label': 'inst_2_0'}
    10 inst_2_1        {'port': False, 'weight': 1, 'node_name': 'inst_2_1', 'label': 'inst_2_1'}
     ========== Edges ==========
    0 7 {'label': '[1]', 'edge_name': 'in0_0', 'weight': 1.0}
    0 9 {'label': '[1]', 'edge_name': 'in0_0', 'weight': 1.0}
    0 8 {'label': '[1]', 'edge_name': 'in0_0', 'weight': 1.0}
    1 7 {'label': '[1]', 'edge_name': 'in1_0', 'weight': 1.0}
    1 9 {'label': '[1]', 'edge_name': 'in1_0', 'weight': 1.0}
    2 9 {'label': '[1]', 'edge_name': 'bus_in_1', 'weight': 1.0}
    3 9 {'label': '[1]', 'edge_name': 'bus_in_0', 'weight': 1.0}
    7 8 {'label': '[1]', 'edge_name': 'wire0_0', 'weight': 1.0}
    8 4 {'label': '[1]', 'edge_name': 'out0_0', 'weight': 1.0}
    9 10 {'label': '[4]', 'edge_name': 'wire_bus_1', 'weight': 4.0}
    10 5 {'label': '[1]', 'edge_name': 'bus_out_1', 'weight': 1.0}
    10 6 {'label': '[1]', 'edge_name': 'bus_out_0', 'weight': 1.0}






|

.. code-block:: default


    import matplotlib.pyplot as plt
    import networkx as nx
    import spydrnet as sdn
    import spydrnet_physical as sdnphy
    from networkx.drawing.nx_pydot import to_pydot

    netlist = sdnphy.load_netlist_by_name('basic_hierarchy')

    top: sdn.Netlist = netlist.top_instance.reference
    graph = top.get_connectivity_network()
    nodes = graph.nodes
    graph_dot = to_pydot(graph)
    graph_dot.write_svg('_nx_graph.svg')

    print(" ========== Nodes ==========")
    print("\n".join([f"{node:2} {nodes[node]['label']:15} {nodes[node]}"
                     for node in nodes]))
    print(" ========== Edges ==========")
    print("\n".join(nx.generate_edgelist(graph, data=True)))


    # Regenerate graph with ports splits into individual nodes
    graph = top.get_connectivity_network(split_ports=True)
    nodes = graph.nodes
    graph_dot = to_pydot(graph)
    graph_dot.write_svg('_nx_graph_split.svg')

    print(" ========== Nodes ==========")
    print("\n".join([f"{node:2} {nodes[node]['label']:15} {nodes[node]}"
                     for node in nodes]))
    print(" ========== Edges ==========")
    print("\n".join(nx.generate_edgelist(graph, data=True)))


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.075 seconds)


.. _sphx_glr_download_auto_openfpga_partition_netlist_to_graph.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: netlist_to_graph.py <netlist_to_graph.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: netlist_to_graph.ipynb <netlist_to_graph.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
