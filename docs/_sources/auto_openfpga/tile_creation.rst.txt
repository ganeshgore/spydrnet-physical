
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_openfpga/tile_creation.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_openfpga_tile_creation.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_openfpga_tile_creation.py:


=========================================
Creating FPGA Tiles from OpenFPGA verilog
=========================================

This example demonstate how to create a tile strcuture from
Verilog netlist obtained from OpenFPGA

.. GENERATED FROM PYTHON SOURCE LINES 10-81




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    = = = = = = = = = = = = = = = = = = = = 
    = = = = = =  DESIGN STATS = = = = = = = 
    = = = = = = = = = = = = = = = = = = = = 
        top_module : fpga_top
        instances  : 97
    = = = = = = = = = = = = = = = = = = = = 
              References    count
    - - - - - - - - - - - - - - - - - - - - 
                grid_clb       16
               cbx_1__1_       12
               cby_1__1_       12
                sb_1__1_        9
             grid_io_top        4
           grid_io_right        4
          grid_io_bottom        4
            grid_io_left        4
               cbx_1__0_        4
               cbx_1__4_        4
               cby_0__1_        4
               cby_4__1_        4
                sb_0__1_        3
                sb_1__0_        3
                sb_1__4_        3
                sb_4__1_        3
                sb_0__0_        1
                sb_0__4_        1
                sb_4__0_        1
                sb_4__4_        1
    grid_clb_1__3__grid_left_out_ft_0_in_grid_clb_1__3__grid_left_out_ft_0_out_ft_1
    grid_clb_2__2__grid_left_out_ft_0_in_grid_clb_2__2__grid_left_out_ft_0_out_ft_1
    grid_clb_1__3__grid_right_out_ft_0_in_grid_clb_1__3__grid_right_out_ft_0_out_ft_1
    grid_clb_4__1__grid_right_out_ft_0_in_grid_clb_4__1__grid_right_out_ft_0_out_ft_1
    grid_clb_1__3__grid_top_out_ft_0_in_grid_clb_1__3__grid_top_out_ft_0_out_ft_1
    grid_clb_4__4__grid_top_out_ft_0_in_grid_clb_4__4__grid_top_out_ft_0_out_ft_1
    grid_clb_1__3__grid_bottom_out_ft_0_in_grid_clb_1__3__grid_bottom_out_ft_0_out_ft_1
    grid_clb_1__1__grid_bottom_out_ft_0_in_grid_clb_1__1__grid_bottom_out_ft_0_out_ft_1
    = = = = = = = = = = = = = = = = = = = = 
    = = = = = =  DESIGN STATS = = = = = = = 
    = = = = = = = = = = = = = = = = = = = = 
        top_module : fpga_top
        instances  : 97
    = = = = = = = = = = = = = = = = = = = = 
              References    count
    - - - - - - - - - - - - - - - - - - - - 
                grid_clb       16
               cbx_1__1_       12
               cby_1__1_       12
                sb_1__1_        9
             grid_io_top        4
           grid_io_right        4
          grid_io_bottom        4
            grid_io_left        4
               cbx_1__0_        4
               cbx_1__4_        4
               cby_0__1_        4
               cby_4__1_        4
                sb_0__1_        3
                sb_1__0_        3
                sb_1__4_        3
                sb_4__1_        3
                sb_0__0_        1
                sb_0__4_        1
                sb_4__0_        1
                sb_4__4_        1
    = = = = = = = = = = = = = = = = = = = = 
    = = = = = =  DESIGN STATS = = = = = = = 
    = = = = = = = = = = = = = = = = = = = = 
        top_module : fpga_top
        instances  : 16
    = = = = = = = = = = = = = = = = = = = = 
              References    count
    - - - - - - - - - - - - - - - - - - - - 
                    tile        4
               left_tile        2
              right_tile        2
                top_tile        2
             bottom_tile        2
           top_left_tile        1
          top_right_tile        1
        bottom_left_tile        1
       bottom_right_tile        1






|

.. code-block:: default


    import glob
    import tempfile
    from itertools import chain
    from os import path

    import spydrnet as sdn
    from spydrnet_physical.util import OpenFPGA, Tile01
    from spydrnet_physical.util import get_names


    def main():
        source_files = glob.glob('homogeneous_fabric/*_Verilog/lb/*.v')
        source_files += glob.glob('homogeneous_fabric/*_Verilog/routing/*.v')
        source_files += glob.glob('homogeneous_fabric/*_Verilog/sub_module/*.v')
        source_files += glob.glob('homogeneous_fabric/*_Verilog/fpga_top.v')

        # Temporary fix to read multiple verilog files
        with tempfile.NamedTemporaryFile(suffix=".v") as fp:
            for eachV in source_files:
                with open(eachV, "r") as fpv:
                    fp.write(str.encode(" ".join(fpv.readlines())))
            fp.seek(0)
            netlist = sdn.parse(fp.name)

        fpga = OpenFPGA(grid=(4, 4), netlist=netlist)
        fpga.design_top_stat()

        # Convert wires to bus structure
        fpga.create_grid_clb_bus()
        fpga.create_grid_io_bus()
        fpga.create_sb_bus()
        fpga.create_cb_bus()

        # Remove undriven nets
        fpga.remove_undriven_nets()

        # Top level nets to bus
        for i in chain(fpga.top_module.get_instances("grid_clb*"),
                       fpga.top_module.get_instances("grid_io*"),
                       fpga.top_module.get_instances("sb_*")):
            for p in filter(lambda x: True, i.reference.ports):
                if p.size > 1 and (i.check_all_scalar_connections(p)):
                    cable_list = []
                    for pin in p.pins[::-1]:
                        cable_list.append(i.pins[pin].wire.cable)
                    fpga.top_module.combine_cables(
                        f"{i.name}_{p.name}", cable_list)

        fpga.create_grid_clb_feedthroughs()

        # Before Creating Tiles
        fpga.design_top_stat()

        fpga.register_tile_generator(Tile01)
        fpga.create_tiles()

        # After Tile creation
        fpga.design_top_stat()

        # Save netlist
        base_dir = (".", "homogeneous_fabric", "_output")
        fpga.save_netlist("sb*", path.join(*base_dir, "routing"))
        fpga.save_netlist("cb*", path.join(*base_dir, "routing"))
        fpga.save_netlist("grid*", path.join(*base_dir, "lb"))
        fpga.save_netlist("*tile*", path.join(*base_dir, "tiles"))
        fpga.save_netlist("fpga_top", path.join(*base_dir))


    if __name__ == "__main__":
        main()


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  4.473 seconds)


.. _sphx_glr_download_auto_openfpga_tile_creation.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: tile_creation.py <tile_creation.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: tile_creation.ipynb <tile_creation.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
